# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
#
# NOTE: This workflow is overkill for most R packages and
# check-standard.yaml is likely a better choice.
# usethis::use_github_action("check-standard") will install it.
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

jobs:

  Build-Libs:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest}
          - {os: windows-2019}
          - {os: ubuntu-18.04}
          - {os: ubuntu-18.04, cuda: '11.3', cuda_patch: "1", cudnn: 'https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.3-linux-x64-v8.2.1.32.tgz'}
          - {os: ubuntu-18.04, cuda: '10.2', cuda_patch: "89", cudnn: 'https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-linux-x64-v7.6.5.32.tgz'}
          - {os: windows-2019, cuda: '11.3', cuda_patch: "1", cudnn: 'https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.3-windows-x64-v8.2.1.32.zip'}

    env:
      TORCH_INSTALL: 1
      TORCH_TEST: 1
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CUDA: ${{matrix.config.cuda}}
      MAKEFLAGS: '-j8'

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          windows-path-include-mingw: false

      - name: Free up 24GB of disk space
        if: ${{ matrix.config.os == 'ubuntu-18.04' }}
        run: sudo rm -rf /usr/share/dotnet

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: 'latest'

      - if: ${{matrix.config.cuda != ''}}
        uses: Jimver/cuda-toolkit@v0.2.7
        id: cuda-toolkit
        with:
          cuda: '${{matrix.config.cuda}}.${{matrix.config.cuda_patch}}'

      - if: ${{ matrix.config.cuda != '' && contains(matrix.config.os, 'ubuntu') }}
        run: |
          wget --quiet ${{matrix.config.cudnn}} -O cudnn.tgz
          tar -xzvf cudnn.tgz
          sudo cp cuda/include/cudnn*.h $CUDA_PATH/include
          sudo cp cuda/lib64/libcudnn* $CUDA_PATH/lib64
          sudo chmod a+r $CUDA_PATH/include/cudnn*.h $CUDA_PATH/lib64/libcudnn*
          rm cudnn.tgz

      - if: ${{ matrix.config.cuda != '' && contains(matrix.config.os, 'windows') }}
        run: |
          curl ${{ matrix.config.cudnn }} --output cudnn.zip --silent --location
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "${env:CUDA_PATH}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "${env:CUDA_PATH}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "${env:CUDA_PATH}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "${env:CUDA_PATH}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""${CUDA_PATH}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""${CUDA_PATH}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install dependencies
        run: |
          Rscript -e "install.packages(c('remotes', 'desc', 'rcmdcheck'))" -e "remotes::install_deps(dependencies = TRUE, INSTALL_opts='--no-multiarch')"
          Rscript -e "remotes::install_github('mlverse/torchexport')"

      - run: |
          cd csrc
          mkdir build && cd build
          cmake ..
          cmake --build . --target package --config Release --parallel 4

      - id: version
        shell: bash
        run: |
          version=$(Rscript -e "cat(as.character(desc::desc_get_version()))")
          fname=$(Rscript -e "cat(list.files('csrc/build/', '*.zip'))")
          echo "::set-output name=version::$version"
          echo "::set-output name=fname::$fname"

      - uses: svenstaro/upload-release-action@v2
        if: github.ref_name == 'main'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: csrc/build/*.zip
          overwrite: true
          file_glob: true
          tag: v${{ steps.version.outputs.version }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.version.outputs.fname }}
          path: csrc/build/*.zip


  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    needs: Build-Libs

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release', artifact: '+cpu-Darwin.zip'}
          - {os: windows-latest, r: 'release', rtools: '42', artifact: '+cpu-win64.zip'}
          - {os: windows-latest, r: '3.6', artifact: '+cpu-win64.zip'}
          - {os: ubuntu-18.04,   r: 'release', artifact: '+cpu-Linux.zip'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      TORCH_INSTALL: 1
      TORCH_TEST: 1
      MAKEFLAGS: '-j8'

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          rtools-version: ${{ matrix.config.rtools }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          windows-path-include-mingw: false

      - name: Install dependencies
        run: |
          Rscript -e "install.packages(c('remotes', 'desc', 'rcmdcheck'))" -e "remotes::install_deps(dependencies = TRUE, INSTALL_opts='--no-multiarch')"
          Rscript -e "remotes::install_github('mlverse/torchexport')"

      - name: Query package version
        shell: bash
        id: version
        run: |
          version=$(Rscript -e "cat(as.character(desc::desc_get_version()))")
          echo "::set-output name=version::$version"

      - uses: actions/download-artifact@v3
        with:
          name: 'torchvisionlib-${{ steps.version.outputs.version }}${{ matrix.config.artifact }}'
          path: build/

      - name: Set the path to the lib
        shell: bash
        run: |
          Rscript -e "cat('ZIP file:', normalizePath(list.files('build/', pattern='zip', full.names=TRUE)))"
          Rscript -e "cat('ENV file:', Sys.getenv('GITHUB_ENV'))"
          Rscript -e "writeLines(paste0('TORCHVISIONLIB_URL=',normalizePath(list.files('build/', pattern='zip', full.names=TRUE))), Sys.getenv('GITHUB_ENV'))"

      - uses: r-lib/actions/check-r-package@v2
        with:
          error-on: '"error"'
          args: 'c("--no-multiarch", "--no-manual")'

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

