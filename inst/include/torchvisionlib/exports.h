// Generated by using torchexport::export() -> do not edit by hand
#pragma once

#ifdef _WIN32
#ifndef TORCHVISIONLIB_HEADERS_ONLY
#define TORCHVISIONLIB_API extern "C" __declspec(dllexport)
#else
#define TORCHVISIONLIB_API extern "C" __declspec(dllimport)
#endif
#else
#define TORCHVISIONLIB_API extern "C"
#endif

#ifndef TORCHVISIONLIB_HANDLE_EXCEPTION
#define TORCHVISIONLIB_HANDLE_EXCEPTION                                  \
catch(const std::exception& ex) {                                  \
  p_torchvisionlib_last_error = make_raw::string(ex.what());             \
} catch (std::string& ex) {                                        \
  p_torchvisionlib_last_error = make_raw::string(ex);                    \
} catch (...) {                                                    \
  p_torchvisionlib_last_error = make_raw::string("Unknown error. ");     \
}
#endif

void host_exception_handler ();
extern void* p_torchvisionlib_last_error;
TORCHVISIONLIB_API void* torchvisionlib_last_error ();
TORCHVISIONLIB_API void torchvisionlib_last_error_clear();

TORCHVISIONLIB_API void* _vision_ops_nms (void* dets, void* scores, double iou_threshold);
TORCHVISIONLIB_API void* _vision_ops_deform_conv2d (void* input, void* weight, void* offset, void* mask, void* bias, std::int64_t stride_h, std::int64_t stride_w, std::int64_t pad_h, std::int64_t pad_w, std::int64_t dilation_h, std::int64_t dilation_w, std::int64_t groups, std::int64_t offset_groups, bool use_mask);
TORCHVISIONLIB_API int _test (void* path);

#ifdef RCPP_VERSION
inline void* vision_ops_nms (void* dets, void* scores, double iou_threshold) {
  auto ret =  _vision_ops_nms(dets, scores, iou_threshold);
  host_exception_handler();
  return ret;
}
inline void* vision_ops_deform_conv2d (void* input, void* weight, void* offset, void* mask, void* bias, std::int64_t stride_h, std::int64_t stride_w, std::int64_t pad_h, std::int64_t pad_w, std::int64_t dilation_h, std::int64_t dilation_w, std::int64_t groups, std::int64_t offset_groups, bool use_mask) {
  auto ret =  _vision_ops_deform_conv2d(input, weight, offset, mask, bias, stride_h, stride_w, pad_h, pad_w, dilation_h, dilation_w, groups, offset_groups, use_mask);
  host_exception_handler();
  return ret;
}
inline int test (void* path) {
  auto ret =  _test(path);
  host_exception_handler();
  return ret;
}
#endif // RCPP_VERSION
